{
    "repo": "tulsyanshubham/TipyDo-Backend",
    "total_files": 8,
    "files": [
        {
            "name": "db.js",
            "size": 411,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/db.js",
            "path": "db.js",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// const psw = process.env.PSW;\n// const mongoURL = 'mongodb://localhost:27017/Tipp?directConnection=true&readPreference=primary';\nconst mongoURL = process.env.MONGO_URI;\n\nconst connectToMongo = async () => {\n    await mongoose.connect(mongoURL).then(() => console.log(\"Connected to MongoDB Successfully\"))\n}\n\nmodule.exports = connectToMongo();"
        },
        {
            "name": "index.js",
            "size": 12183,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/index.js",
            "path": "index.js",
            "content": "require('./db');\nrequire('dotenv').config();\n\nconst express = require('express')\nconst cors = require('cors')\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\nconst bodyParser = require('body-parser');\nconst nodemailer = require('nodemailer');\n\nconst Manager = require('./modals/manager')\nconst Employee = require('./modals/employee');\nconst Session = require('./modals/session');\nconst Count = require('./modals/count');\n\nconst fetchuser = require('./middleware/fetchuser');\n\nconst secretKey = process.env.SECTET_KEY;\nconst app = express();\nconst port = process.env.PORT || 5000;\nconst mailpsw = process.env.MAILPSW;\nconst mailid = process.env.MAILID;\n\nconst transporter = nodemailer.createTransport({\n    service: 'gmail',\n    host: 'smtp.gmail.com',\n    port: 587,\n    secure: false,\n    auth: {\n        user: mailid,\n        pass: mailpsw\n    }\n});\n\nconst mailsend = (mail, psw) => {\n    const mailOptions = {\n        from: mailid,\n        to: mail,\n        subject: 'Sending Password for TipyDo',\n        html : `<div style=\"position: inherit; padding: 20px; margin: 20px auto; width: 80%; max-width: 600px; border-radius: 10px; box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1); border: 1px solid #fbfbfb;\">\n        <div style=\"text-align: center; padding-bottom: 0px;\">\n            <h1>Welcome to <div style=\"color: green\">TippDo!</div></h1>\n          \t<h3>Your pssword is:</h3>\n          \t<h1 style=\"color: green\">${psw}</h1>\n          <h3><a href=\"https://tipydo.onrender.com/login/employee\">Click here</a> to visit login page</h3>\n            <h5>Thank you for registering on our site. We're excited to have you with us.</h5>\n        </div>\n    </div>`\n    };\n\n    transporter.sendMail(mailOptions, function (error, info) {\n        if (error) {\n            console.log(error);\n        } else {\n            console.log('Email sent: ' + info.response);\n        }\n    });\n}\n\n// app.use(express.json())\napp.use(cors())\napp.use(express.urlencoded({extended: false}));\napp.use(bodyParser.json({ limit: '20mb' }));\napp.use(bodyParser.urlencoded({ limit: '20mb', extended: true }));\n\nconst genauthtoken = async (user) => {\n    const token = await jwt.sign({ id: user._id.toString() }, secretKey);\n    return token;\n}\nconst cookieobj = {\n    expires: new Date(Date.now() + (24 * 60 * 60 * 1000)),\n    httpOnly: true,\n    // secure:true\n}\n\napp.get('/', async (req, res) => {\n    res.send(`Backend running on PORT: ${port}`)\n})\n\napp.post('/api/signup', async (req, res) => {\n    try {\n        console.log(req.body);\n        const tosave = new Manager({ ...req.body });\n        const tosave2 = new Count({ managerusername : req.body.username, count: 0 });\n        const save = await tosave.save();\n        const save2 = await tosave2.save();\n        const token = await genauthtoken(save);\n        console.log(save,save2);\n        // const expirationDate = new Date();\n        // expirationDate.setTime(expirationDate.getTime() + (24 * 60 * 60 * 1000));\n        // res.cookie(\"auth_token\", token, cookieobj)\n        res.send({ success: true, token });\n    } catch (err) {\n        console.log(err.message);\n        res.status(500).send({\n            success: false,\n            msg: err.message\n        });\n    }\n})\n\napp.get('/api/login', async (req, res) => {\n    try {\n        let success = false;\n        const username = req.header(\"username\");\n        const password = req.header(\"password\");\n        console.log(req.header)\n        let user = await Manager.findOne({ username });\n        if (!user) {\n            return res.status(400).json({ success, \"msg\": \"Incorrect username/password\" });\n        }\n        const pswcompare = await bcrypt.compare(password, user.password);\n        if (!pswcompare) {\n            return res.status(400).json({ success, \"msg\": \"Incorrect username/password\" });\n        }\n        const token = await genauthtoken(user)\n        res.cookie(\"auth_token\", token, cookieobj)\n        success = true;\n        // delete user.password;\n        res.json({ success, token, msg: \"Logged in Sucessfully\" });\n\n    } catch (error) {\n        console.log(err.message);\n        res.status(500).send({\n            success: false,\n            msg: err.message\n        });\n    }\n})\n\napp.post('/api/login', fetchuser, async (req, res) => {\n    try {\n        // console.log(req.user)\n        let success = false;\n        const user = await Manager.findById(req.user.id, { password: 0, _id: 0, __v: 0 })\n        console.log(user)\n        if (!user) {\n            return res.status(404).send({ success, \"msg\": \"Please Logout\" });\n        }\n        // res.cookie(\"auth_token\", req.user.token, cookieobj)\n        success = true;\n        console.log(user)\n        res.send({ success, ...user._doc })\n    } catch (error) {\n        console.log(err.message);\n        res.status(500).send({\n            success: false,\n            msg: err.message\n        });\n    }\n})\n\nconst randomgen = () => {\n    const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    var string_length = 5;\n    let randomstring = '';\n    for (var i = 0; i < string_length; i++) {\n        var rnum = Math.floor(Math.random() * chars.length);\n        randomstring += chars.substring(rnum, rnum + 1);\n    }\n    return randomstring;\n}\n\napp.post('/api/employee', fetchuser, async (req, res) => {\n    try {\n        // console.log(req.user)\n        let success = false;\n        const user = await Manager.findById(req.user.id).select(\"username\")\n        const psw = randomgen();\n        const tosave = new Employee({ ...req.body, managerusername: user.username, password: psw });\n        const save = await tosave.save();\n        mailsend(save.email, psw);\n        success = true;\n        console.log({ ...save._doc });\n        res.send({ success, ...save._doc });\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.delete('/api/employee', async (req, res) => {\n    try {\n        console.log(req.body.email)\n        const email = req.body.email;\n        const result = await Employee.findOneAndDelete({ email: email });\n        if (!result) {\n            return res.status(404).send(\"Employee not found\");\n        }\n        res.send({ result: \"Deleted\" });\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.patch('/api/employee', async (req, res) => {\n    try {\n        // console.log(req.body)\n        const { id, ...detail } = req.body;\n        // console.log(detail)\n        const result = await Employee.findByIdAndUpdate(id, detail, { new: true });\n        console.log(result)\n        res.send(result);\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.get('/api/employee', async (req, res) => {\n    try {\n        const username = req.header(\"username\");\n        console.log(username)\n        const emps = await Employee.find({ managerusername: username });\n        console.log(emps)\n        res.send(emps)\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.get('/api/clientpage', async (req, res) => {\n    try {\n        const username = req.header(\"username\");\n        console.log(username)\n        const mgr = await Manager.findOne({ username: username }, { _id: 0, password: 0, __v: 0 })\n        const emps = await Employee.find({ managerusername: username }, { _id: 0, __v: 0 });\n        // const {ownername,businessname,businesstype,email,phone} = mgr;\n        const result = { mgr, emps }\n        res.send(result)\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.get('/api/count', async (req, res) => {\n    try {\n        // console.log(req.user)\n        var success = false;\n        const save = await Count.findOne({mgrusername : req.headers.mgruserame});\n        success = true;\n        console.log({ ...save._doc });\n        res.send({ success, ...save._doc });\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send({success, msg : error.message});\n    }\n})\n\napp.patch('/api/count', async (req, res) => {\n    try {\n        // console.log(req.user)\n        var success = false;\n        const save = await Count.findOneAndUpdate({mgrusername : req.body.mgruserame},{count : req.body.count},{ new: true });\n        success = true;\n        console.log({ ...save._doc });\n        res.send({ success, ...save._doc });\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send({success, msg : error.message});\n    }\n})\n\napp.get('/api/employee/login', async (req, res) => {\n    try {\n        let success = false;\n        const email = req.header(\"email\");\n        const password = req.header(\"password\");\n        console.log(req.header)\n        let user = await Employee.findOne({ email });\n        if (!user) {\n            return res.status(400).json({ success, \"msg\": \"Incorrect username/password\" });\n        }\n        const pswcompare = await bcrypt.compare(password, user.password);\n        if (!pswcompare) {\n            return res.status(400).json({ success, \"msg\": \"Incorrect username/password\" });\n        }\n        const token = await genauthtoken(user)\n        res.cookie(\"auth_token\", token, cookieobj)\n        success = true;\n        // delete user.password;\n        res.json({ success, token, msg: \"Logged in Sucessfully\" });\n\n    } catch (error) {\n        console.log(err.message);\n        res.status(500).send({\n            success: false,\n            msg: err.message\n        });\n    }\n})\n\napp.post('/api/employee/login', fetchuser, async (req, res) => {\n    try {\n        // console.log(req.user)\n        let success = false;\n        const user = await Employee.findById(req.user.id, { password: 0, _id: 0, __v: 0,image:0 })\n        console.log(user)\n        if (!user) {\n            return res.status(404).send({ success, \"msg\": \"Please Logout\" });\n        }\n        // res.cookie(\"auth_token\", req.user.token, cookieobj)\n        success = true;\n        console.log(user)\n        res.send({ success, ...user._doc })\n    } catch (error) {\n        console.log(err.message);\n        res.status(500).send({\n            success: false,\n            msg: err.message\n        });\n    }\n})\n\napp.post('/api/employee/tableno', fetchuser, async (req, res) => {\n    try {\n        // console.log(req.user)\n        let success = false;\n        const user = await Employee.findById(req.user.id)\n        const tosave = new Session({ managerusername: user.managerusername, email: user.email, tableno : req.body.tableno });\n        const save = await tosave.save();\n        success = true;\n        console.log(save);\n        res.send( save);\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.get('/api/employee/tableno', async (req, res) => {\n    try {\n        let success = false;\n        let sessions;\n        if(req.header(\"email\")){\n            const email = req.header(\"email\");\n            console.log(email)\n            sessions = await Session.find({ email });\n        }\n        if(req.header(\"managerusername\")){\n            const managerusername = req.header(\"managerusername\");\n            console.log(managerusername)\n            sessions = await Session.find({ managerusername });\n        }\n        \n        success = true;\n        console.log(sessions);\n        res.send( {sessions} );\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send(error.message);\n    }\n})\n\napp.delete('/api/employee/tableno', async (req, res) => {\n    try {\n        // console.log(req.user)\n        let success = false;\n        const result = await Session.findOneAndDelete(req.body);\n        if (!result) {\n            return res.status(404).send({success, msg :\"Employee not found\"});\n        }\n        success = true;\n        res.send({ success,result: \"Deleted\" });\n    } catch (error) {\n        console.log(error.message);\n        res.status(500).send({success, msg : error.message});\n    }\n})\n\napp.listen(port, () => {\n    console.log(`Backend listening on port ${port}`)\n})"
        },
        {
            "name": "fetchuser.js",
            "size": 577,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/middleware/fetchuser.js",
            "path": "middleware/fetchuser.js",
            "content": "require('dotenv').config();\nconst jwt = require('jsonwebtoken');\nconst secretKey = process.env.SECTET_KEY;\n\nconst fetchuser = (req,res,next) => {\n    const token = req.header(\"auth-token\");\n    console.log(token)\n    if(!token){\n        res.status(401).send({error : \"Invalid Token\"});\n    }\n    try {\n        const data = jwt.verify(token, secretKey);\n        req.user = {\n            id : data.id,\n            token : token,\n        }\n        next();\n        \n    } catch (error) {\n        res.status(401).send({error : \"Invalid Token\"});\n    }\n}\n\nmodule.exports = fetchuser;"
        },
        {
            "name": "employee.js",
            "size": 1826,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/modals/employee.js",
            "path": "modals/employee.js",
            "content": "const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst { Schema } = mongoose;\n\nconst employeeschema = new Schema({\n    managerusername: {\n        type: String,\n        require: true\n    },\n    name: {\n        type: String,\n        require: true\n    },\n    employeetype: {\n        type: String,\n        enum: ['Full-time', 'Part-time', 'Temporary', 'Intern', 'Seasonal', 'Leased'],\n        require: true,\n    },\n    worktype: {\n        type: String,\n        require: true\n    },\n    dateofjoining: {\n        type: Date,\n        require: true,\n        default: Date.now\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        unique: [true, \"Email already Exists\"],\n        validate: {\n            validator: function (value) {\n                return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n            },\n            message: 'Invalid email address'\n        }\n    },\n    phone: {\n        type: String,\n        required: true,\n        trim: true,\n        validate: {\n            validator: function (value) {\n                return /^\\d{10}$/.test(value);\n            },\n            message: 'Invalid mobile number'\n        }\n    },\n    upiId: {\n        //todo\n        type: String,\n        require: true\n    },\n    upiname: {\n        type: String,\n        require: true\n    },\n    password: {\n        type: String,\n        require: true\n    },\n    image: {\n        //todo\n        type: String,\n        require: true\n    },\n});\n\n// passord Hash\nemployeeschema.pre('save', async function (next) {\n    if (this.isModified(\"password\")) {\n        this.password = await bcrypt.hash(this.password, 10);\n        console.log(`Hashed Password : ${this.password}`);\n    }\n    next();\n})\n\nconst Employee = mongoose.model('employee', employeeschema);\nmodule.exports = Employee;"
        },
        {
            "name": "session.js",
            "size": 593,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/modals/session.js",
            "path": "modals/session.js",
            "content": "const mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\nconst sessionschema = new Schema({\n    managerusername: {\n        type: String,\n        require: true\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    tableno: {\n        type: Number,\n        required: true,\n    },\n    // expireAt: {\n    //     type: Date,\n    //     default: Date.now,\n    //     expires: 5000\n    // }\n});\n\n// sessionschema.index({ expireAt: 1 }, { expireAfterSeconds: 60 });\nconst Session = mongoose.model('session', sessionschema);\nmodule.exports = Session;"
        },
        {
            "name": "count.js",
            "size": 364,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/modals/count.js",
            "path": "modals/count.js",
            "content": "const mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\nconst countschema = new Schema({\n    managerusername: {\n        type: String,\n        require: true\n    },\n    count: {\n        type: Number\n    }\n});\n\n// sessionschema.index({ expireAt: 1 }, { expireAfterSeconds: 60 });\nconst Count = mongoose.model('count', countschema);\nmodule.exports = Count;"
        },
        {
            "name": "manager.js",
            "size": 1613,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/modals/manager.js",
            "path": "modals/manager.js",
            "content": "const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst { Schema } = mongoose;\n\nconst managerschema = new Schema({\n    ownername: {\n        type: String,\n        require: true\n    },\n    businessname: {\n        type: String,\n        require: true,\n    },\n    businesstype: {\n        type: String,\n        enum: ['Hotel', 'Valet', 'Bar', 'Restaurant', 'Salon', 'Non-Profit'],\n        require: true,\n    },\n    date: {\n        type: Date,\n        default: Date.now\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        // unique: [true, \"Email already Exists\"],\n        validate: {\n            validator: function (value) {\n                return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n            },\n            message: 'Invalid email address'\n        }\n    },\n    phone: {\n        type: String,\n        required: true,\n        trim: true,\n        validate: {\n            validator: function (value) {\n                return /^\\d{10}$/.test(value);\n            },\n            message: 'Invalid mobile number'\n        }\n    },\n    username: {\n        type: String,\n        require: true,\n        unique: [true, \"Username already Exists\"],\n    },\n    password: {\n        type: String,\n        require: true,\n    }\n});\n\n// passord Hash\nmanagerschema.pre('save', async function (next) {\n    if (this.isModified(\"password\")) {\n        this.password = await bcrypt.hash(this.password, 10);\n        console.log(`Hashed Password : ${this.password}`);\n    }\n    next();\n})\n\nconst Manager = mongoose.model('manager', managerschema);\nmodule.exports = Manager;"
        },
        {
            "name": "package.json",
            "size": 485,
            "html_url": "https://github.com/tulsyanshubham/TipyDo-Backend/blob/main/package.json",
            "path": "package.json",
            "content": "{\n  \"name\": \"tiptop-backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"Shubham\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bcrypt\": \"^5.1.1\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"body-parser\": \"^1.20.2\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.4.5\",\n    \"express\": \"^4.19.2\",\n    \"express-validator\": \"^7.0.1\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.3.2\",\n    \"nodemailer\": \"^6.9.13\"\n  }\n}\n"
        }
    ],
    "dependencies": {
        "package.json": "{\n  \"name\": \"tiptop-backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"Shubham\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bcrypt\": \"^5.1.1\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"body-parser\": \"^1.20.2\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.4.5\",\n    \"express\": \"^4.19.2\",\n    \"express-validator\": \"^7.0.1\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.3.2\",\n    \"nodemailer\": \"^6.9.13\"\n  }\n}\n"
    }
}